exports[`test Schema snapshot 1`] = `
"schema {
  query: query
  mutation: mutation
}

type family implements node {
  id: String!
  adults: [person!]!
  children: [person!]!
}

type familyConnection {
  edges: [familyEdge!]!
  pageInfo: PageInfo!
}

type familyEdge {
  node: family!
}

input familyInput {
  adults: [pointer!]!
  children: [pointer!]!
}

input familyMutation {
  clientMutationId: String
  family: familyInput!
}

type familyPayload {
  clientMutationId: String!
  family: family!
}

type mutation {
  insertPerson(input: personMutation!): personPayload!
  insertFamily(input: familyMutation!): familyPayload!
}

interface node {
  id: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type person implements node {
  id: String!
  name: String!
}

type personConnection {
  edges: [personEdge!]!
  pageInfo: PageInfo!
}

type personEdge {
  node: person!
}

input personInput {
  name: String!
}

input personMutation {
  clientMutationId: String
  person: personInput!
}

type personPayload {
  clientMutationId: String!
  person: person!
}

input pointer {
  id: String!
}

type query {
  node(id: String!): node!
  viewer: viewer!
}

type viewer {
  personAll(first: Int, last: Int, before: String, after: String): personConnection!
  familyAll(first: Int, last: Int, before: String, after: String): familyConnection!
}
"
`;
