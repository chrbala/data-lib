// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Schema snapshot 1`] = `
"schema {
  query: query
  mutation: mutation
}

type family implements node {
  id: String!
  adults: [person!]!
  children: [person!]!
}

type familyConnection {
  edges: [familyEdge!]!
  pageInfo: PageInfo!
}

type familyEdge {
  cursor: String!
  node: family!
}

input insertFamilyInput {
  adults: [pointer!]!
  children: [pointer!]!
}

input insertFamilyMutation {
  clientMutationId: String
  family: insertFamilyInput!
}

type insertFamilyPayload {
  clientMutationId: String!
  edge: familyEdge!
}

input insertPersonInput {
  name: String!
}

input insertPersonMutation {
  clientMutationId: String
  person: insertPersonInput!
}

type insertPersonPayload {
  clientMutationId: String!
  edge: personEdge!
}

type mutation {
  insertPerson(input: insertPersonMutation!): insertPersonPayload!
  updatePerson(input: updatePersonMutation!): updatePersonPayload!
  insertFamily(input: insertFamilyMutation!): insertFamilyPayload!
  updateFamily(input: updateFamilyMutation!): updateFamilyPayload!
}

interface node {
  id: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type person implements node {
  id: String!
  name: String!
}

type personConnection {
  edges: [personEdge!]!
  pageInfo: PageInfo!
}

type personEdge {
  cursor: String!
  node: person!
}

input pointer {
  id: String!
}

type query {
  node(id: String!): node!
  viewer: viewer!
}

input updateFamilyInput {
  id: String!
  adults: [pointer!]!
  children: [pointer!]!
}

input updateFamilyMutation {
  clientMutationId: String
  family: updateFamilyInput!
}

type updateFamilyPayload {
  clientMutationId: String!
  node: family!
}

input updatePersonInput {
  id: String!
  name: String!
}

input updatePersonMutation {
  clientMutationId: String
  person: updatePersonInput!
}

type updatePersonPayload {
  clientMutationId: String!
  node: person!
}

type viewer {
  personAll(first: Int, last: Int, before: String, after: String, filter: String): personConnection!
  familyAll(first: Int, last: Int, before: String, after: String, filter: String): familyConnection!
}
"
`;
